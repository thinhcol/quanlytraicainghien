/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UI;

import DuAnDAO.NhanVienDAO;
import DuAnDAO.ThanNhanDAO;
import Entity.NhanVien;
import Entity.ThanNhan;
import Helper.DialogHelper;
import Helper.RandomStringExmple;
import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.InputStream;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.Properties;
import javax.mail.Message;
import javax.mail.PasswordAuthentication;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;
import javax.swing.JOptionPane;
import javax.swing.Timer;

/**
 *
 * @author Lenovo
 */
public class QuenMatKhau extends javax.swing.JDialog {

    /**
     * Creates new form QuenMatKhau
     */
    public QuenMatKhau(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
 
        this.init();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        txtCode = new javax.swing.JTextField();
        txtMatKhauMoi = new javax.swing.JPasswordField();
        lblTime = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        txtMaNV = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtXacNhanMK = new javax.swing.JPasswordField();
        btnThoat = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        btnGuiEmail = new javax.swing.JButton();
        btnXacNhan = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        lblHome = new javax.swing.JLabel();
        btnGuiSDT = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setUndecorated(true);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setFont(new java.awt.Font("Monospaced", 1, 14)); // NOI18N
        jLabel2.setText("Mật khẩu mới");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 250, -1, 30));

        txtCode.setFont(new java.awt.Font("Monospaced", 1, 14)); // NOI18N
        txtCode.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(204, 204, 204)));
        jPanel1.add(txtCode, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 190, 240, 30));

        txtMatKhauMoi.setFont(new java.awt.Font("Monospaced", 1, 14)); // NOI18N
        txtMatKhauMoi.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(204, 204, 204)));
        jPanel1.add(txtMatKhauMoi, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 240, 240, 30));

        lblTime.setFont(new java.awt.Font("Monospaced", 0, 24)); // NOI18N
        lblTime.setForeground(new java.awt.Color(130, 145, 239));
        lblTime.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTime.setText("270");
        jPanel1.add(lblTime, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 130, 70, 40));

        jLabel6.setFont(new java.awt.Font("Monospaced", 1, 14)); // NOI18N
        jLabel6.setText("Mã code");
        jPanel1.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 200, -1, -1));

        jLabel7.setFont(new java.awt.Font("Monospaced", 1, 14)); // NOI18N
        jLabel7.setText("Mã nhân viên");
        jPanel1.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 90, -1, -1));

        txtMaNV.setFont(new java.awt.Font("Monospaced", 1, 14)); // NOI18N
        txtMaNV.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(204, 204, 204)));
        jPanel1.add(txtMaNV, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 80, 240, 30));

        jLabel3.setFont(new java.awt.Font("Monospaced", 1, 14)); // NOI18N
        jLabel3.setText("Xác nhận MK");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 300, -1, 30));

        txtXacNhanMK.setFont(new java.awt.Font("Monospaced", 1, 14)); // NOI18N
        txtXacNhanMK.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(204, 204, 204)));
        jPanel1.add(txtXacNhanMK, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 290, 240, 30));

        btnThoat.setBackground(new java.awt.Color(255, 255, 255));
        btnThoat.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icon/New Icon/icons8_delete_24px_1.png"))); // NOI18N
        btnThoat.setContentAreaFilled(false);
        btnThoat.setOpaque(true);
        btnThoat.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/Icon/New Icon/icons8_delete_24px.png"))); // NOI18N
        btnThoat.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnThoatMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnThoatMouseExited(evt);
            }
        });
        btnThoat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnThoatActionPerformed(evt);
            }
        });
        jPanel1.add(btnThoat, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 0, 30, -1));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/forgot.jpg"))); // NOI18N
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 0, 370, 450));

        jLabel4.setFont(new java.awt.Font("Monospaced", 1, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 0, 153));
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Đổi mật khẩu bằng email");
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 50, 390, 20));

        btnGuiEmail.setBackground(new java.awt.Color(130, 145, 239));
        btnGuiEmail.setFont(new java.awt.Font("Monospaced", 1, 14)); // NOI18N
        btnGuiEmail.setForeground(new java.awt.Color(255, 255, 255));
        btnGuiEmail.setText("Email");
        btnGuiEmail.setContentAreaFilled(false);
        btnGuiEmail.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnGuiEmail.setOpaque(true);
        btnGuiEmail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuiEmailActionPerformed(evt);
            }
        });
        jPanel1.add(btnGuiEmail, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 130, 80, 40));

        btnXacNhan.setBackground(new java.awt.Color(130, 145, 239));
        btnXacNhan.setFont(new java.awt.Font("Monospaced", 1, 16)); // NOI18N
        btnXacNhan.setForeground(new java.awt.Color(255, 255, 255));
        btnXacNhan.setText("Xác nhận");
        btnXacNhan.setContentAreaFilled(false);
        btnXacNhan.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnXacNhan.setOpaque(true);
        btnXacNhan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnXacNhanActionPerformed(evt);
            }
        });
        jPanel1.add(btnXacNhan, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 340, 360, 40));

        jLabel5.setBackground(new java.awt.Color(0, 0, 153));
        jLabel5.setFont(new java.awt.Font("Monospaced", 1, 18)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(0, 0, 153));
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("Xin chào ! Chúng tôi là Euphoria");
        jPanel1.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 20, 390, -1));

        lblHome.setFont(new java.awt.Font("Monospaced", 1, 13)); // NOI18N
        lblHome.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icon/New Icon/home_25px.png"))); // NOI18N
        lblHome.setText("Về trang chủ");
        lblHome.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblHomeMouseClicked(evt);
            }
        });
        jPanel1.add(lblHome, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 390, -1, 40));

        btnGuiSDT.setBackground(new java.awt.Color(130, 145, 239));
        btnGuiSDT.setFont(new java.awt.Font("Monospaced", 1, 14)); // NOI18N
        btnGuiSDT.setForeground(new java.awt.Color(255, 255, 255));
        btnGuiSDT.setText("Số điện thoại");
        btnGuiSDT.setContentAreaFilled(false);
        btnGuiSDT.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnGuiSDT.setOpaque(true);
        btnGuiSDT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuiSDTActionPerformed(evt);
            }
        });
        jPanel1.add(btnGuiSDT, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 130, 140, 40));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 451, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnThoatMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnThoatMouseEntered

    }//GEN-LAST:event_btnThoatMouseEntered

    private void btnThoatMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnThoatMouseExited
        // TODO add your handling code here:
    }//GEN-LAST:event_btnThoatMouseExited

    private void btnThoatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnThoatActionPerformed
        exit();
    }//GEN-LAST:event_btnThoatActionPerformed

    private void btnGuiEmailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuiEmailActionPerformed
        this.sendCodeEmail();
    }//GEN-LAST:event_btnGuiEmailActionPerformed

    private void btnXacNhanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnXacNhanActionPerformed
        this.changePass();
    }//GEN-LAST:event_btnXacNhanActionPerformed

    private void lblHomeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblHomeMouseClicked
        cancel();
    }//GEN-LAST:event_lblHomeMouseClicked

    private void btnGuiSDTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuiSDTActionPerformed
        sendCodeSDT();
    }//GEN-LAST:event_btnGuiSDTActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(QuenMatKhau.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(QuenMatKhau.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(QuenMatKhau.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(QuenMatKhau.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                QuenMatKhau dialog = new QuenMatKhau(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnGuiEmail;
    private javax.swing.JButton btnGuiSDT;
    private javax.swing.JButton btnThoat;
    private javax.swing.JButton btnXacNhan;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lblHome;
    private javax.swing.JLabel lblTime;
    private javax.swing.JTextField txtCode;
    private javax.swing.JTextField txtMaNV;
    private javax.swing.JPasswordField txtMatKhauMoi;
    private javax.swing.JPasswordField txtXacNhanMK;
    // End of variables declaration//GEN-END:variables

    Timer timer;
    boolean testTime = false;
    String code;
    NhanVienDAO dao = new NhanVienDAO();
    ThanNhanDAO tndao = new ThanNhanDAO();

    public void init() {
        updateStatus();
    }

    public void runClock() {
        timer = new Timer(1000, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                int x = Integer.parseInt(lblTime.getText());
                if (x > 0) {
                    lblTime.setText(String.valueOf(--x));
                    testTime = true;
                } else {
                    lblTime.setText("270");
                    testTime = false;
                    timer.stop();
                }
                updateStatus();
            }
        });
        timer.start();
    }

    public boolean checkExistID() {
        String maNV = txtMaNV.getText();
        if (!maNV.isEmpty()) {
            if (dao.selectByID(maNV) == null && tndao.selectByID(maNV) == null) {
                Helper.DialogHelper.alert(this, "Không tìm thấy mã nhân viên hoặc thân nhân");
                return false;
            } else {
                return true;
            }
        } else {
            Helper.DialogHelper.alert(this, "Bạn chưa nhập mã nhân viên");
            return false;
        }
    }

    public String getEmailByIDNV() {
        String maNV = txtMaNV.getText();
        return dao.selectEmailByID(maNV).getEmail();
    }

    public String getTNEmailTN() {
        String matn = txtMaNV.getText();
        return tndao.selectEmailByID(matn).getEmail();
    }

    public void sendCodeToEmail() {
        code = new RandomStringExmple().randomAlphaNumeric(4);
        if (txtMaNV.getText().contains("TN")) {
            String to = getTNEmailTN();
            String emailGui = "vuthien130902@gmail.com";
            String passGui = "phuonglinh1309";
            String subject = "Đây là mã code để đổi mật khẩu" + "\nVui lòng nhập trong vòng 270 giây";
            try {
                Properties p = new Properties();
                p.put("mail.smtp.auth", "true");
                p.put("mail.smtp.starttls.enable", "true");
                p.put("mail.smtp.host", "smtp.gmail.com");
                p.put("mail.smtp.port", 587);

                Session s = Session.getInstance(p,
                        new javax.mail.Authenticator() {
                    protected PasswordAuthentication getPasswordAuthentication() {
                        return new PasswordAuthentication(emailGui, passGui);
                    }
                });

                Message msg = new MimeMessage(s);
                msg.setFrom(new InternetAddress(emailGui));
                msg.setRecipients(Message.RecipientType.TO, InternetAddress.parse(to));
                msg.setSubject(subject);
                msg.setText(code);

                Transport.send(msg);
                System.out.print(code);
                JOptionPane.showMessageDialog(this, "Kiểm tra mã code tại email");
            } catch (Exception e) {
                e.printStackTrace();
            }
        } else {
            String to = getEmailByIDNV();
            String emailGui = "vuthien130902@gmail.com";
            String passGui = "phuonglinh1309";
            String subject = "Đây là mã code để đổi mật khẩu" + "\nVui lòng nhập trong vòng 270 giây";
            try {
                Properties p = new Properties();
                p.put("mail.smtp.auth", "true");
                p.put("mail.smtp.starttls.enable", "true");
                p.put("mail.smtp.host", "smtp.gmail.com");
                p.put("mail.smtp.port", 587);

                Session s = Session.getInstance(p,
                        new javax.mail.Authenticator() {
                    protected PasswordAuthentication getPasswordAuthentication() {
                        return new PasswordAuthentication(emailGui, passGui);
                    }
                });

                Message msg = new MimeMessage(s);
                msg.setFrom(new InternetAddress(emailGui));
                msg.setRecipients(Message.RecipientType.TO, InternetAddress.parse(to));
                msg.setSubject(subject);
                msg.setText(code);

                Transport.send(msg);
                System.out.print(code);
                JOptionPane.showMessageDialog(this, "Kiểm tra mã code tại email");
            } catch (Exception e) {
                e.printStackTrace();
            }
        }

    }

    public void sendCodeEmail() {
        if (checkExistID()) {
            runClock();
            sendCodeToEmail();
        }
    }

    public String getSDTByID() {
        String maNV = txtMaNV.getText();
        return dao.selectSDTByID(maNV).getSoDT();
    }

    public void sendCodeToSDT() {
        if (txtMaNV.getText().contains("TN") ||txtMaNV.getText().contains("tn")|| txtMaNV.getText().contains("tN") || txtMaNV.getText().contains("Tn")) {
            JOptionPane.showMessageDialog(this, "Thân nhân không được sử dụng chức năng này");
            return;
        } else {
            try {
                String maNV = txtMaNV.getText();
                String to = getSDTByID();
                System.out.println(to);
                code = new RandomStringExmple().randomAlphaNumeric(4);
                String str = "" + code + "";
                String str2 = str.replaceAll("\\s", "+");
                URL url = new URL("http://192.168.1.7:8080/v1/sms/send/?phone=" + to + "&message=" + str2 + "");
                InputStream i = null;
                JOptionPane.showMessageDialog(this, "Mã code được gửi thành công. \n Vui lòng kiểm tra số điện thoại");
                
                try {
                    i = url.openStream();
                } catch (Exception e) {
                    e.printStackTrace();
                }
                if (i != null) {

                }
            } catch (MalformedURLException e) {
                e.printStackTrace();
            }
        }
        

    }

    public void sendCodeSDT() {
        if (checkExistID()) {
            runClock();
            sendCodeToSDT();
        }
    }

    public void changePass() {
        if (txtCode.getText().equals(code)) {
            if (validatePassword()) {
                updatePassInDB();
                lblTime.setText("0");
                Helper.DialogHelper.alert(this, "Thay đổi mật khẩu thành công");
            }
        } else {
            Helper.DialogHelper.alert(this, "Mã code không chính xác");
        }
    }

    public boolean validatePassword() {
        String matKhauMoi = new String(txtMatKhauMoi.getPassword());
        String xacNhanMK = new String(txtXacNhanMK.getPassword());
        if (matKhauMoi.isEmpty()) {
            Helper.DialogHelper.alert(this, "Bạn chưa nhập mật khẩu mới");
            txtMatKhauMoi.requestFocus();
            return false;
        } else if (xacNhanMK.isEmpty()) {
            Helper.DialogHelper.alert(this, "Bạn chưa nhập xác nhận mật khẩu");
            txtXacNhanMK.requestFocus();
            return false;
        } else if (!matKhauMoi.equals(xacNhanMK)) {
            Helper.DialogHelper.alert(this, "Xác nhận mật khẩu không chính xác");
            return false;
        }
        return true;
    }

    public void updatePassInDB() {
        if (txtMaNV.getText().contains("TN")) {
            ThanNhan tn = tndao.selectByID(txtMaNV.getText());
            String matKhauMoi = new String(txtMatKhauMoi.getPassword());
            tn.setPass(matKhauMoi);
            tndao.update(tn);
        } else {
            NhanVien nv = dao.selectByID(txtMaNV.getText());
            String matKhauMoi = new String(txtMatKhauMoi.getPassword());
            nv.setMatKhau(matKhauMoi);
            dao.update(nv);
        }

    }

    public void updateStatus() {
        txtCode.setEnabled(testTime);
        txtMatKhauMoi.setEnabled(testTime);
        txtXacNhanMK.setEnabled(testTime);
        btnXacNhan.setEnabled(testTime);
        btnGuiEmail.setEnabled(!testTime);
        txtMaNV.setEnabled(!testTime);
        if (!testTime) {
            btnGuiEmail.setBackground(new Color(130, 145, 239));
            btnGuiSDT.setBackground(new Color(130, 145, 239));
            btnXacNhan.setBackground(new Color(128, 128, 128));
        } else {
            btnXacNhan.setBackground(new Color(130, 145, 239));
            btnGuiEmail.setBackground(new Color(128, 128, 128));
            btnGuiSDT.setBackground(new Color(128, 128, 128));
        }
    }

    void cancel() {
        this.dispose();
        new DangNhap(null, true).setVisible(true);
    }

    void exit() {
        if (DialogHelper.confirm(this, "Bạn có muốn thoát khỏi ứng dụng không?")) {
            System.exit(0);
        }
    }
}
